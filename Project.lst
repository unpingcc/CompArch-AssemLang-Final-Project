Microsoft (R) Macro Assembler Version 14.29.30141.0	    06/08/22 01:42:58
<PROGRAMMING ASSIGNMENT 6: Designing low-level I/O procedure  Page 1 - 1


				TITLE PROGRAMMING ASSIGNMENT 6: Designing low-level I/O procedures (Proj6_UNPINGCC.asm)

				; Author: Cassidy Unpingco
				; Last Modified: 6/07/2022
				; OSU email address: UNPINGCC@oregonstate.edu
				; Course number/section:   CS271 Section 400
				; Project Number: 6                Due Date:6/7/2022
				; Description: This program utilizes two macros and several procedures to produce an array of signed 10 user entered numbers and outputs them for display, displays 
				; the truncated average as well as the sums. The assignment is designed to utilize low level i/o like string primitives and builds upon everything we've learned in
				;this course.

				INCLUDE Irvine32.INC
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				; (insert macro definitions here)
				mGetString MACRO UserPromptAddress, Buffer, LengthOfBuff
				;--------------------------------------------------------------------------
				;Name:mGetString
				;Preconditions: recieves UserPromptAddress, Buffer, LengthOfBuff
				;Postconditions: Registers edx and ECX are modified and cleared
				;Receives; UserPromptAddress, Buffer, LengthOfBuff
				;Returns reads string based on recieved input
				;--------------------------------------------------------------------------
				; display prompt (Input param, ref) 
				; input user keyboard entry into mem ( ouput param, ref) 
				;counter (input param, by value) for len of string 
					PUSH	EDX
					PUSH	ECX
					MOV		EDX, UserPromptAddress
					CALL	WriteString
					MOV		EDX, Buffer
					MOV		ECX, LengthOfBuff
					CALL	ReadString
					POP		ECX
					POP		EDX

				ENDM

				mDisplayString MACRO AddressString
				;--------------------------------------------------------------------------
				;Name: mDisplayString
				;Preconditions an addressString must be passed to maco 
				;Postconditions: makes changes to edx and clears edx
				;Receives: AddressString
				;Returns a written string for display
				;--------------------------------------------------------------------------
				;print string 
					PUSH	EDX
					MOV		EDX, AddressString
					CALL	WriteString
					POP		EDX

				ENDM
 = 0000000A			ARRAYSIZE = 10
 = 7FFFFFFF			HIGHRANGE = 2147483647 ;(2^31 -1) 
 =-7FFFFFFF			LOWRANGE  =	-2147483647 ;(-2^31) 
 = 00000030			ASCII_LO  = 48
 = 00000039			ASCII_HI  =	57
 = 0000002B			ASCII_P	  = 43
 = 0000002D			ASCII_N	  = 45
 = 0000000B			USERSIZE  = 11


 00000000			.data

 00000000 50 52 4F 47 52	TitleLabel		BYTE	"PROGRAMMING ASSIGNMENT 6: Designing low-level I/O procedures", 10,13, "Written by Cassidy Unpingco",10,13,10,13,0
	   41 4D 4D 49 4E
	   47 20 41 53 53
	   49 47 4E 4D 45
	   4E 54 20 36 3A
	   20 44 65 73 69
	   67 6E 69 6E 67
	   20 6C 6F 77 2D
	   6C 65 76 65 6C
	   20 49 2F 4F 20
	   70 72 6F 63 65
	   64 75 72 65 73
	   0A 0D 57 72 69
	   74 74 65 6E 20
	   62 79 20 43 61
	   73 73 69 64 79
	   20 55 6E 70 69
	   6E 67 63 6F 0A
	   0D 0A 0D 00
 0000005E 50 6C 65 61 73	ProgInstruc		BYTE	"Please provide 10 signed decimal integers.", 10,13, "Each number needs to be small enough to fit inside a 32 bit register.", 10,13, "After you have finished inputting the raw numbers I will display a", 10,13, "list of the integers, their sum, and their average value." ,10,13,10,13,0 
	   65 20 70 72 6F
	   76 69 64 65 20
	   31 30 20 73 69
	   67 6E 65 64 20
	   64 65 63 69 6D
	   61 6C 20 69 6E
	   74 65 67 65 72
	   73 2E 0A 0D 45
	   61 63 68 20 6E
	   75 6D 62 65 72
	   20 6E 65 65 64
	   73 20 74 6F 20
	   62 65 20 73 6D
	   61 6C 6C 20 65
	   6E 6F 75 67 68
	   20 74 6F 20 66
	   69 74 20 69 6E
	   73 69 64 65 20
	   61 20 33 32 20
	   62 69 74 20 72
	   65 67 69 73 74
	   65 72 2E 0A 0D
	   41 66 74 65 72
	   20 79 6F 75 20
	   68 61 76 65 20
	   66 69 6E 69 73
	   68 65 64 20 69
	   6E 70 75 74 74
	   69 6E 67 20 74
	   68 65 20 72 61
	   77 20 6E 75 6D
	   62 65 72 73 20
	   49 20 77 69 6C
	   6C 20 64 69 73
	   70 6C 61 79 20
	   61 0A 0D 6C 69
	   73 74 20 6F 66
	   20 74 68 65 20
	   69 6E 74 65 67
	   65 72 73 2C 20
	   74 68 65 69 72
	   20 73 75 6D 2C
	   20 61 6E 64 20
	   74 68 65 69 72
	   20 61 76 65 72
	   61 67 65 20 76
	   61 6C 75 65 2E
	   0A 0D 0A 0D 00
 00000153 45 6E 74 65 72	SignNumEntry	BYTE	"Enter a signed number:",0 
	   20 61 20 73 69
	   67 6E 65 64 20
	   6E 75 6D 62 65
	   72 3A 00
 0000016A 59 6F 75 20 64	ErrorAlert		BYTE	"You did not enter a signed number or your number was too large.", 10,13, "Please try again:",0 
	   69 64 20 6E 6F
	   74 20 65 6E 74
	   65 72 20 61 20
	   73 69 67 6E 65
	   64 20 6E 75 6D
	   62 65 72 20 6F
	   72 20 79 6F 75
	   72 20 6E 75 6D
	   62 65 72 20 77
	   61 73 20 74 6F
	   6F 20 6C 61 72
	   67 65 2E 0A 0D
	   50 6C 65 61 73
	   65 20 74 72 79
	   20 61 67 61 69
	   6E 3A 00
 000001BD 59 6F 75 20 65	NumsEntered		BYTE	"You entered the following numbers:", 0 
	   6E 74 65 72 65
	   64 20 74 68 65
	   20 66 6F 6C 6C
	   6F 77 69 6E 67
	   20 6E 75 6D 62
	   65 72 73 3A 00
 000001E0 0A 0D 54 68 65	NumSum			BYTE	10,13,"The sum of these numbers is: ", 0 
	   20 73 75 6D 20
	   6F 66 20 74 68
	   65 73 65 20 6E
	   75 6D 62 65 72
	   73 20 69 73 3A
	   20 00
 00000200 0A 0D 54 68 65	TruncAvg		BYTE	10,13,"The truncated average is: ", 0 
	   20 74 72 75 6E
	   63 61 74 65 64
	   20 61 76 65 72
	   61 67 65 20 69
	   73 3A 20 00
 0000021D 0A 0D 54 68 61	ThxBye			BYTE	10,13,"Thanks for playing!", 0
	   6E 6B 73 20 66
	   6F 72 20 70 6C
	   61 79 69 6E 67
	   21 00
 00000233 2C 20 00		Spacer			BYTE	", ",0
 00000236 00000000		NegVal			DWORD	?
 0000023A  0000000A [		UserArray		SDWORD	ARRAYSIZE DUP(?)
	    00000000
	   ]



 00000000			.code
 00000000			main PROC

 00000000  68 00000000 R		PUSH	OFFSET TitleLabel
 00000005  68 0000005E R		PUSH	OFFSET ProgInstruc
 0000000A  E8 00000058			CALL	StartProgram
 0000000F  68 0000023A R		PUSH	OFFSET UserArray
 00000014  6A 0A			PUSH	LENGTHOF UserArray
 00000016  68 00000153 R		PUSH	OFFSET SignNumEntry
 0000001B  68 00000236 R		PUSH	OFFSET NegVal
 00000020  68 0000016A R		PUSH	OFFSET ErrorAlert
 00000025  E8 0000005E			CALL	GetUserInput
					
 0000002A  68 0000023A R		PUSH	OFFSET	UserArray
 0000002F  6A 0A			PUSH	LENGTHOF UserArray
 00000031  68 000001BD R		PUSH	OFFSET	NumsEntered
 00000036  68 00000233 R		PUSH	OFFSET	Spacer
 0000003B  E8 00000244			CALL	DisplayNumsEntered

 00000040  68 0000023A R		PUSH	OFFSET	UserArray
 00000045  6A 0A			PUSH	LENGTHOF UserArray
 00000047  68 000001E0 R		PUSH	OFFSET NumSum
 0000004C  68 00000200 R		PUSH	OFFSET TruncAvg
 00000051  E8 00000277			CALL	SumTrunc

 00000056  68 0000021D R		PUSH	OFFSET ThxBye
 0000005B  E8 000002C1			CALL	Farewell
					
					Invoke ExitProcess,0	; exit to operating system
 00000060  6A 00	   *	    push   +000000000h
 00000062  E8 00000000 E   *	    call   ExitProcess
 00000067			main ENDP

 00000067			StartProgram PROC USES EDX
 00000067  52		   *	    push   edx
 00000068  55				PUSH	EBP 
 00000069  8B EC			MOV		EBP, ESP 
 0000006B  8B 55 10			MOV		EDX, [EBP +16] ;TITLEINTRO 16
					mDisplayString	EDX
 0000006E  52		     1		PUSH	EDX
 0000006F  8B D2	     1		MOV		EDX, EDX
 00000071  E8 00000000 E     1		CALL	WriteString
 00000076  5A		     1		POP		EDX
 00000077  8B 55 0C			MOV		EDX, [EBP +12] ; 12
					mDisplayString	EDX
 0000007A  52		     1		PUSH	EDX
 0000007B  8B D2	     1		MOV		EDX, EDX
 0000007D  E8 00000000 E     1		CALL	WriteString
 00000082  5A		     1		POP		EDX
 00000083  5D				POP		EBP
 00000084  5A		   *	    pop    edx
 00000085  C2 0008			RET		8
					
 00000088			StartProgram ENDP

 00000088			GetUserInput PROC	USES ESI ECX EAX
				;--------------------------------------------------------------------------
				;This procedure creates a stack and sets up the loop for ReadVal 
				;convert using string primitives the strng of ASCII digits to its numeric value rep
				;validate user input as valid 
				;store in mem (output param, ref
				;Name: GetUserInput 
				;Preconditions CALLs ReadVal Procedure, Array must be set up to handle the input of the program 
				;Postconditions: USES ESI ECX EAX
				;Receives; length of array, empty array, prompts, error message, neg val.
				;Returns None
				;--------------------------------------------------------------------------
 00000088  56		   *	    push   esi
 00000089  51		   *	    push   ecx
 0000008A  50		   *	    push   eax
 0000008B  55				PUSH	EBP
 0000008C  8B EC			MOV		EBP, ESP 
 0000008E  8B 75 24			MOV		ESI, [EBP+36] 
 00000091  8B 4D 20			MOV		ECX, [EBP + 32] ;LENGTHOF ARRAY 
 00000094				viewArray:
 00000094  8B 45 1C					MOV		EAX, [EBP + 28] ;Prompt
 00000097  50						PUSH	EAX
 00000098  FF 75 18					PUSH	[EBP +24] ;NegVal
 0000009B  FF 75 14					PUSH	[EBP + 20] ;ERROR MSG

 0000009E  E8 0000000E					CALL	ReadVal
 000000A3  8F 06					POP		[ESI]
 000000A5  83 C6 04					ADD		ESI, 4
 000000A8  E2 EA					LOOP	viewArray
 000000AA  5D				POP		EBP
 000000AB  58		   *	    pop    eax
 000000AC  59		   *	    pop    ecx
 000000AD  5E		   *	    pop    esi
 000000AE  C2 0014			RET		20
 000000B1			GetUserInput ENDP


 000000B1			ReadVal PROC USES	EAX EBX
				;--------------------------------------------------------------------------
				;;invoke mGetString 
				;convert using string primitives the string of ASCII digits to its numeric value rep
				;validate user input as valid 
				;store in mem (output param, ref
				;Name: ReadVal 
				;Preconditions USES	EAX EBX, LOCAL variable UserNum dictated by USERSIZE CONSTANT, AND ValidNum
				;Postconditions: MODIFIES REGISTERS AND CALLS UPON VALIDATENUMS PROCEDURE
				;Receives; USERSIZE CONSTANT, USER INPUT
				;Returns NONE
				;--------------------------------------------------------------------------

					LOCAL UserNum[USERSIZE]: BYTE, ValidNum: SDWORD 
 000000B1  55		   *	    push   ebp
 000000B2  8B EC	   *	    mov    ebp, esp
 000000B4  83 C4 F0	   *	    add    esp, 0FFFFFFF0h
 000000B7  50		   *	    push   eax
 000000B8  53		   *	    push   ebx
 000000B9  56				PUSH	ESI
 000000BA  51				PUSH	ECX
 000000BB  8B 45 10			MOV		EAX, [EBP + 16] 
 000000BE  8D 5D F5			LEA		EBX, UserNum
 000000C1				readLoop: 
						
						mGetString		EAX, EBX, LENGTHOF UserNum
 000000C1  52		     1		PUSH	EDX
 000000C2  51		     1		PUSH	ECX
 000000C3  8B D0	     1		MOV		EDX, EAX
 000000C5  E8 00000000 E     1		CALL	WriteString
 000000CA  8B D3	     1		MOV		EDX, EBX
 000000CC  B9 0000000B	     1		MOV		ECX, LENGTHOF UserNum
 000000D1  E8 00000000 E     1		CALL	ReadString
 000000D6  59		     1		POP		ECX
 000000D7  5A		     1		POP		EDX
 000000D8  8B 5D 08				MOV				EBX, [EBP +8] 
 000000DB  53					PUSH			EBX
 000000DC  8D 45 F0				LEA				EAX, ValidNum
 000000DF  50					PUSH			EAX
 000000E0  8D 45 F5				LEA				EAX, UserNum
 000000E3  50					PUSH			EAX
 000000E4  6A 0B				PUSH			LENGTHOF UserNum
 000000E6  E8 0000001C				CALL			ValidNumbers
 000000EB  5A					POP				EDX
 000000EC  89 55 10				MOV				[EBP+16], EDX
 000000EF  8B 45 F0				MOV				EAX, ValidNum
 000000F2  83 F8 01				CMP				EAX, 1
 000000F5  8B 45 0C				MOV				EAX, [EBP+12]
 000000F8  8D 5D F5				LEA				EBX, UserNum
 000000FB  75 C4				JNE				readLoop
 000000FD  EB 00				JMP				_end
 000000FF			_end: 
 000000FF  59					POP		ECX
 00000100  5E					POP		ESI
 00000101  5B		   *	    pop    ebx
 00000102  58		   *	    pop    eax
 00000103  C9		   *	    leave  
 00000104  C2 0008				RET		8
 00000107			ReadVal ENDP 

 00000107			ValidNumbers	PROC USES ESI ECX	EAX	EDX
				;ValidNumbers is part of ReadVal in that it validates the input recieved by the user. 
				;If input is valid it then CALLs upon a converter to convert the str to ints.
				;Name: ValidNumbers
				;Preconditions  USES ESI ECX	EAX	EDX LOCAL variable NumTooBig to track size of input
				;Postconditions: Changes NegVal to account for any sign changes for input
				;Receives; USERSIZE CONSTANT, USER INPUT
				;Returns int values into the array
				;--------------------------------------------------------------------------

					LOCAL	NumTooBig:SDWORD

 00000107  55		   *	    push   ebp
 00000108  8B EC	   *	    mov    ebp, esp
 0000010A  83 C4 FC	   *	    add    esp, 0FFFFFFFCh
 0000010D  56		   *	    push   esi
 0000010E  51		   *	    push   ecx
 0000010F  50		   *	    push   eax
 00000110  52		   *	    push   edx
 00000111  8B 75 0C				MOV		ESI, [EBP +12]
 00000114  8B 4D 08				MOV		ECX, [EBP+8]
 00000117  FC					CLD
 00000118  BB 00000000				MOV		EBX, 0

 0000011D  AC					LODSB
 0000011E  3C 2D				CMP				AL, ASCII_N
 00000120  74 06				JE				_NegFlag
 00000122  3C 2B				cmp				AL, ASCII_P
 00000124  74 0C				JE				_PosFlag
 00000126  EB 13				JMP				_LoadString
						
 00000128			_NegFlag: 
 00000128  53					push	EBX
 00000129  BB 00000001				mov		EBX, 1	
 0000012E  5B					pop		EBX
 0000012F  49					dec		ECX
 00000130  EB 08				JMP		_NextPartofString

 00000132			_PosFlag:
 00000132  53					push	EBX
 00000133  BB 00000001				mov		EBX, 1	
 00000138  5B					pop		EBX
 00000139  49					dec		ECX

 0000013A			_NextPartofString: 
 0000013A  AC					LODSB
						

 0000013B			_LoadString:
 0000013B  3C 00				CMP		AL, 0 
 0000013D  74 24				JE		_SwitchingToInt
 0000013F  3C 30				CMP		AL, ASCII_LO
 00000141  7C 08				JL		_invalidInput
 00000143  3C 39				CMP		AL, ASCII_HI
 00000145  77 04				JA		_invalidInput
 00000147  E2 F2				LOOP	_LoadString
 00000149  EB 18				JMP		_SwitchingToInt

 0000014B			_invalidInput:
 0000014B  8B 55 14			MOV		EDX, [EBP+20] 
					mDisplayString	EDX
 0000014E  52		     1		PUSH	EDX
 0000014F  8B D2	     1		MOV		EDX, EDX
 00000151  E8 00000000 E     1		CALL	WriteString
 00000156  5A		     1		POP		EDX
 00000157  8B 55 10			MOV		EDX, [EBP +16] 
 0000015A  B8 00000000			MOV		EAX, 0 
 0000015F  89 02			MOV		[EDX], EAX
 00000161  EB 32			JMP		_recordVal

 00000163			_SwitchingToInt:
 00000163  8B 55 08				MOV		EDX, [EBP +8] 
 00000166  3B CA				CMP		ECX, EDX
 00000168  74 E1				JE		_invalidInput
 0000016A  8D 45 FC				LEA		EAX, NumTooBig
 0000016D  BA 00000000				MOV		EDX, 0 
 00000172  89 10				MOV		[EAX], EDX
 00000174  FF 75 0C				PUSH	[EBP+12] 
 00000177  FF 75 08				PUSH	[EBP +8] 
 0000017A  8D 55 FC				LEA		EDX, NumTooBig
 0000017D  52					PUSH	EDX
 0000017E  E8 0000001E				CALL	ConversionToNum
 00000183  8B 55 FC				MOV		EDX, NumTooBig
 00000186  83 FA 01				CMP		EDX, 1
 00000189  74 C0				JE		_invalidInput
 0000018B  8B 55 10				MOV		EDX, [EBP+16]
 0000018E  B8 00000001				MOV		EAX, 1
 00000193  89 02				MOV		[EDX],EAX

 00000195			_recordVal:
 00000195  5A				POP		EDX
 00000196  89 55 14			MOV		[EBP+20], EDX
 00000199  5A		   *	    pop    edx
 0000019A  58		   *	    pop    eax
 0000019B  59		   *	    pop    ecx
 0000019C  5E		   *	    pop    esi
 0000019D  C9		   *	    leave  
 0000019E  C2 000C			RET		12

 000001A1			ValidNumbers ENDP

 000001A1			ConversionToNum PROC USES ESI ECX EAX EBX EDX 

					LOCAL Number: SDWORD
 000001A1  55		   *	    push   ebp
 000001A2  8B EC	   *	    mov    ebp, esp
 000001A4  83 C4 FC	   *	    add    esp, 0FFFFFFFCh
 000001A7  56		   *	    push   esi
 000001A8  51		   *	    push   ecx
 000001A9  50		   *	    push   eax
 000001AA  53		   *	    push   ebx
 000001AB  52		   *	    push   edx
 000001AC  8B 75 10			MOV		ESI, [EBP +16] 
 000001AF  8B 4D 0C			MOV		ECX, [EBP+12]
 000001B2  8D 45 FC			LEA		EAX, Number
 000001B5  33 DB			XOR		EBX, EBX
 000001B7  89 18			MOV		[EAX], EBX
 000001B9  33 C0			XOR		EAX, EAX
 000001BB  33 D0			XOR		EDX, EAX
 000001BD  FC				CLD 
					 
 000001BE			_LoadDigits:
 000001BE  AC				LODSB

 000001BF  83 F8 00			CMP		EAX, 0
 000001C2  74 29			je		_endInsertion
 000001C4  83 F8 2D			CMP		EAX, ASCII_N
 000001C7  74 08			JE		_CONTINUE
 000001C9  83 F8 2B			CMP		EAX, ASCII_P
 000001CC  74 03			JE		_CONTINUE
 000001CE  83 E8 30			SUB		EAX, ASCII_LO
 000001D1			_CONTINUE:
 000001D1  8B D8			MOV		EBX, EAX
 000001D3  8B 45 FC			MOV		EAX, Number
 000001D6  BA 0000000A			MOV		EDX, 10 
 000001DB  F7 E2			mul		EDX
 000001DD  72 16			jc		_tooLargeNumber ; check for carry after multiply
 000001DF  03 C3			ADD		EAX, EBX ;ADD the digit to the converted value
 000001E1  72 12			jc		_tooLargeNumber 
 000001E3  89 45 FC			MOV		Number, EAX ; store temporary value from EAX
 000001E6  B8 00000000			MOV		EAX, 0 
 000001EB  E2 D1			LOOP	_LoadDigits

 000001ED			_endInsertion:
 000001ED  8B 45 FC			MOV		EAX, Number
 000001F0  89 45 10			MOV		[EBP + 16], EAX ; move converted value to stack
 000001F3  EB 12			JMP		_finishedHere

				; change isTooLarge if value does not fit in 32-bit register

 000001F5			_tooLargeNumber:
 000001F5  8B 5D 08			MOV		EBX, [EBP + 8] ; isTooLarge is at [EBP + 8]
 000001F8  B8 00000001			MOV		EAX, 1 ; set isTooLarge to true
 000001FD  89 03			MOV		[EBX], EAX
 000001FF  B8 00000000			MOV		EAX, 0
 00000204  89 45 10			MOV		[EBP + 16], EAX
 00000207			_finishedHere:
 00000207  5A		   *	    pop    edx
 00000208  5B		   *	    pop    ebx
 00000209  58		   *	    pop    eax
 0000020A  59		   *	    pop    ecx
 0000020B  5E		   *	    pop    esi
 0000020C  C9		   *	    leave  
 0000020D  C2 0008			RET		8
 00000210			ConversionToNum ENDP

 00000210			WriteVal PROC USES EAX
				;--------------------------------------------------------------------------
				;This procedure writes the values of the result string and CALLs upon 
				;the display macro to print the value. 
				;convert numeric SDWROD value (input param, by value) to a string of ASCII digits
				;invoke mDisplayString to print the ASCII rep 
				;Name: WriteVal
				;Preconditions USES EAX, Proc SwitchtoStr, signs are effectively checked in order
				;to print strings appropriately.
				;Postconditions: EAX and result string are moved into registers
				;Receives: result string
				;Returns EAX value
				;--------------------------------------------------------------------------
					LOCAL resultString[USERSIZE]:BYTE
 00000210  55		   *	    push   ebp
 00000211  8B EC	   *	    mov    ebp, esp
 00000213  83 C4 F4	   *	    add    esp, 0FFFFFFF4h
 00000216  50		   *	    push   eax
 00000217  8D 45 F5			LEA		EAX, resultString
 0000021A  50				PUSH	EAX
 0000021B  FF 75 08			PUSH	[EBP + 8]
 0000021E  E8 00000011			CALL	SwitchToStr
 00000223  8D 45 F5			LEA		EAX, resultString
					mDisplayString EAX ; print the value
 00000226  52		     1		PUSH	EDX
 00000227  8B D0	     1		MOV		EDX, EAX
 00000229  E8 00000000 E     1		CALL	WriteString
 0000022E  5A		     1		POP		EDX
 0000022F  58		   *	    pop    eax
 00000230  C9		   *	    leave  
 00000231  C2 0004			RET		4

 00000234			WriteVal ENDP

 00000234			SwitchToStr PROC USES EAX EBX ECX
				LOCAL	holdChar:SDWORD
				;  division of integer by 10
 00000234  55		   *	    push   ebp
 00000235  8B EC	   *	    mov    ebp, esp
 00000237  83 C4 FC	   *	    add    esp, 0FFFFFFFCh
 0000023A  50		   *	    push   eax
 0000023B  53		   *	    push   ebx
 0000023C  51		   *	    push   ecx
 0000023D  8B 45 08			MOV		EAX, [EBP + 8]
 00000240  BB 0000000A			MOV		EBX, 10
 00000245  B9 00000000			MOV		ECX, 0
 0000024A  FC				CLD
				; counts the value of digits


				; pushs the digits in reverse order

 0000024B			_divTen:
 0000024B  99				CDQ
 0000024C  F7 F3			DIV		EBX
 0000024E  52				PUSH	EDX
 0000024F  FC				CLD
 00000250  41				INC		ECX ;increment the value of ECX
 00000251  3C 2D			CMP		AL, ASCII_N
 00000253  74 0E			JE		_SignChar
 00000255  3C 2B			CMP		AL, ASCII_P
 00000257  74 0A			JE		_SignChar
 00000259  83 F8 00			CMP		EAX, 0 
 0000025C  75 ED			JNE		_divTen
 0000025E  8B 7D 0C			MOV		edi, [EBP + 12] ; move into destination char array
 00000261  EB 0C			JMP		_LoadChar	
				;store the character in the array

 00000263			_SignChar: 
 00000263  E8 00000000 E		CALL	WriteChar
 00000268  58				POP		EAX
 00000269  83 E9 01			SUB		ECX, 1
 0000026C  FC				CLD

 0000026D  EB DC			JMP		_divTen

 0000026F			_LoadChar:
 0000026F  8F 45 FC			POP		holdChar
 00000272  8A 45 FC			MOV		AL,  BYTE PTR holdChar
 00000275  04 30			ADD		AL, 48
 00000277  AA				STOSB
 00000278  E2 F5			LOOP	_LoadChar
 0000027A  B0 00			MOV		AL, 0
 0000027C  AA				STOSB
 0000027D  59		   *	    pop    ecx
 0000027E  5B		   *	    pop    ebx
 0000027F  58		   *	    pop    eax
 00000280  C9		   *	    leave  
 00000281  C2 0008			RET		8
 00000284			 SwitchToStr ENDP


 00000284			 DisplayNumsEntered PROC	USES ESI EBX ECX EDX 
				 ;--------------------------------------------------------------------------
				;This procedure displays the the array of input for the user utilizing the mDisplayString MACRO
				;Name: DisplayNumsEntered
				;Preconditions USES ESI EBX ECX EDX, WriteVal Procedure is CALLed to loop through values
				;Postconditions: EAX and result string are moved into registers
				;Receives: result string, array 
				;Returns display string and array of inputes
				;--------------------------------------------------------------------------
				 
 00000284  56		   *	    push   esi
 00000285  53		   *	    push   ebx
 00000286  51		   *	    push   ecx
 00000287  52		   *	    push   edx
 00000288  55				PUSH	EBP
 00000289  8B EC			MOV		EBP, ESP 
 0000028B  8B 55 1C			MOV		EDX, [EBP+28] 
					mDisplayString	EDX
 0000028E  52		     1		PUSH	EDX
 0000028F  8B D2	     1		MOV		EDX, EDX
 00000291  E8 00000000 E     1		CALL	WriteString
 00000296  5A		     1		POP		EDX
 00000297  8B 75 24			MOV		ESI, [EBP +36] 
 0000029A  8B 4D 20			MOV		ECX,[EBP +32]
 0000029D  BB 00000001			MOV		EBX, 1

 000002A2			_displayValue:
 000002A2  FF 36			PUSH	[ESI]
 000002A4  E8 FFFFFF67			CALL	WriteVal ;CALL the procedure WriteVal
 000002A9  83 C6 04			ADD		ESI, 4
 000002AC  3B 5D 20			CMP		EBX, [EBP + 32]
 000002AF  7D 0F			JGE		_endDisplayList
 000002B1  8B 55 18			MOV		EDX, [EBP + 24] ;spacer
					mDisplayString EDX
 000002B4  52		     1		PUSH	EDX
 000002B5  8B D2	     1		MOV		EDX, EDX
 000002B7  E8 00000000 E     1		CALL	WriteString
 000002BC  5A		     1		POP		EDX
 000002BD  43				INC		EBX
 000002BE  E2 E2			LOOP _displayValue

 000002C0			_endDisplayList:
 000002C0  E8 00000000 E		CALL	Crlf
 000002C5  5D				POP		EBP
 000002C6  5A		   *	    pop    edx
 000002C7  59		   *	    pop    ecx
 000002C8  5B		   *	    pop    ebx
 000002C9  5E		   *	    pop    esi
 000002CA  C2 0010			RET		16
 000002CD			 DisplayNumsEntered ENDP

				 ;------------------------------------------------------------------------------
				; Procedure SumTrunc displays the sum and truncated average of an array of integers.
				;Name: WriteValSumTrunc
				;Preconditions USES ESI EDX ECX EAX ebx Array needs to be filled and passed to this proc
				;Postconditions: xor is used to clear overflow and carry flags
				;Receives; Array of user input
				;Returns Sum and Trunc Average
				;--------------------------------------------------------------------------
				;------------------------------------------------------------------------------
 000002CD			SumTrunc PROC USES ESI EDX ECX EAX ebx

 000002CD  56		   *	    push   esi
 000002CE  52		   *	    push   edx
 000002CF  51		   *	    push   ecx
 000002D0  50		   *	    push   eax
 000002D1  53		   *	    push   ebx
 000002D2  55				PUSH	EBP
 000002D3  8B EC			MOV		EBP, ESP
 000002D5  8B 55 20			MOV		EDX, [EBP + 32] ; 
					mDisplayString EDX
 000002D8  52		     1		PUSH	EDX
 000002D9  8B D2	     1		MOV		EDX, EDX
 000002DB  E8 00000000 E     1		CALL	WriteString
 000002E0  5A		     1		POP		EDX
 000002E1  8B 75 28			MOV		ESI, [EBP + 40] ; array value at [EBP + 40]
 000002E4  8B 4D 24			MOV		ECX, [EBP + 36] ; LENGTHOF array is present at [EBP + 36]
 000002E7  33 C0			XOR		EAX, EAX ; perform XOR to clear overflow and carry flags

 000002E9			_summedValues:
 000002E9  03 06			ADD		EAX, [ESI]
 000002EB  83 C6 04			ADD		ESI, 4
 000002EE  E2 F9			loop	_summedValues
					
 000002F0  50				PUSH	EAX	;display sum
 000002F1  E8 FFFFFF1A			CALL	WriteVal
 000002F6  E8 00000000 E		CALL	Crlf

				; calculate and display average
 000002FB  8B 55 1C			MOV		EDX, [EBP + 28] 
					mDisplayString	EDX
 000002FE  52		     1		PUSH	EDX
 000002FF  8B D2	     1		MOV		EDX, EDX
 00000301  E8 00000000 E     1		CALL	WriteString
 00000306  5A		     1		POP		EDX
 00000307  99				CDQ
 00000308  8B 5D 24			MOV		ebx, [EBP + 36] ; LENGTHOF userarray is presnt at[EBP + 36]
 0000030B  F7 F3			DIV		ebx 
 0000030D  50				PUSH	EAX
 0000030E  E8 FFFFFEFD			CALL	WriteVal ; CALL WriteVal to print the value
 00000313  E8 00000000 E		CALL	Crlf
 00000318  5D				POP		EBP
 00000319  5B		   *	    pop    ebx
 0000031A  58		   *	    pop    eax
 0000031B  59		   *	    pop    ecx
 0000031C  5A		   *	    pop    edx
 0000031D  5E		   *	    pop    esi
 0000031E  C2 0010			RET		16
 00000321			SumTrunc ENDP
				;---------------------------------------------------------------
				; Procedure Farewell displays the program exit message.;
				;Name: Farewell
				;Preconditions String has been pushed to the stack
				;Postconditions: Utilizes
				;Receives; String 
				;Returns: Farewell String
				;---------------------------------------------------------------
 00000321			 Farewell PROC USES EDX
 00000321  52		   *	    push   edx
 00000322  55				PUSH	EBP
 00000323  8B EC			MOV		EBP, ESP
 00000325  E8 00000000 E		CALL	Crlf
 0000032A  8B 55 0C			MOV		EDX, [EBP + 12]
					mDisplayString EDX
 0000032D  52		     1		PUSH	EDX
 0000032E  8B D2	     1		MOV		EDX, EDX
 00000330  E8 00000000 E     1		CALL	WriteString
 00000335  5A		     1		POP		EDX
 00000336  E8 00000000 E		CALL	Crlf
 0000033B  5D				POP		EBP
 0000033C  5A		   *	    pop    edx
 0000033D  C2 0004			RET		4
 00000340			Farewell ENDP



				END main


Microsoft (R) Macro Assembler Version 14.29.30141.0	    06/08/22 01:42:58
<PROGRAMMING ASSIGNMENT 6: Designing low-level I/O procedure  Symbols 2 - 1




Macros:

                N a m e                 Type

mDisplayString . . . . . . . . .	Proc
mGetString . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000262 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000340 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ConversionToNum  . . . . . . . .	P Near	 000001A1 _TEXT	Length= 0000006F Public STDCALL
  Number . . . . . . . . . . . .	DWord	 bp - 00000004
  _LoadDigits  . . . . . . . . .	L Near	 000001BE _TEXT	
  _CONTINUE  . . . . . . . . . .	L Near	 000001D1 _TEXT	
  _endInsertion  . . . . . . . .	L Near	 000001ED _TEXT	
  _tooLargeNumber  . . . . . . .	L Near	 000001F5 _TEXT	
  _finishedHere  . . . . . . . .	L Near	 00000207 _TEXT	
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DisplayNumsEntered . . . . . . .	P Near	 00000284 _TEXT	Length= 00000049 Public STDCALL
  _displayValue  . . . . . . . .	L Near	 000002A2 _TEXT	
  _endDisplayList  . . . . . . .	L Near	 000002C0 _TEXT	
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Farewell . . . . . . . . . . . .	P Near	 00000321 _TEXT	Length= 0000001F Public STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetUserInput . . . . . . . . . .	P Near	 00000088 _TEXT	Length= 00000029 Public STDCALL
  viewArray  . . . . . . . . . .	L Near	 00000094 _TEXT	
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadVal  . . . . . . . . . . . .	P Near	 000000B1 _TEXT	Length= 00000056 Public STDCALL
  UserNum  . . . . . . . . . . .	Byte	 bp - 0000000B
  ValidNum . . . . . . . . . . .	DWord	 bp - 00000010
  readLoop . . . . . . . . . . .	L Near	 000000C1 _TEXT	
  _end . . . . . . . . . . . . .	L Near	 000000FF _TEXT	
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StartProgram . . . . . . . . . .	P Near	 00000067 _TEXT	Length= 00000021 Public STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SumTrunc . . . . . . . . . . . .	P Near	 000002CD _TEXT	Length= 00000054 Public STDCALL
  _summedValues  . . . . . . . .	L Near	 000002E9 _TEXT	
SwitchToStr  . . . . . . . . . .	P Near	 00000234 _TEXT	Length= 00000050 Public STDCALL
  holdChar . . . . . . . . . . .	DWord	 bp - 00000004
  _divTen  . . . . . . . . . . .	L Near	 0000024B _TEXT	
  _SignChar  . . . . . . . . . .	L Near	 00000263 _TEXT	
  _LoadChar  . . . . . . . . . .	L Near	 0000026F _TEXT	
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ValidNumbers . . . . . . . . . .	P Near	 00000107 _TEXT	Length= 0000009A Public STDCALL
  NumTooBig  . . . . . . . . . .	DWord	 bp - 00000004
  _NegFlag . . . . . . . . . . .	L Near	 00000128 _TEXT	
  _PosFlag . . . . . . . . . . .	L Near	 00000132 _TEXT	
  _NextPartofString  . . . . . .	L Near	 0000013A _TEXT	
  _LoadString  . . . . . . . . .	L Near	 0000013B _TEXT	
  _invalidInput  . . . . . . . .	L Near	 0000014B _TEXT	
  _SwitchingToInt  . . . . . . .	L Near	 00000163 _TEXT	
  _recordVal . . . . . . . . . .	L Near	 00000195 _TEXT	
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteVal . . . . . . . . . . . .	P Near	 00000210 _TEXT	Length= 00000024 Public STDCALL
  resultString . . . . . . . . .	Byte	 bp - 0000000B
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000067 Public STDCALL
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
ARRAYSIZE  . . . . . . . . . . .	Number	 0000000Ah   
ASCII_HI . . . . . . . . . . . .	Number	 00000039h   
ASCII_LO . . . . . . . . . . . .	Number	 00000030h   
ASCII_N  . . . . . . . . . . . .	Number	 0000002Dh   
ASCII_P  . . . . . . . . . . . .	Number	 0000002Bh   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
ErrorAlert . . . . . . . . . . .	Byte	 0000016A _DATA	
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
HIGHRANGE  . . . . . . . . . . .	Number	 7FFFFFFFh   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
LOWRANGE . . . . . . . . . . . .	Number	 -7FFFFFFFh   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
NegVal . . . . . . . . . . . . .	DWord	 00000236 _DATA	
NumSum . . . . . . . . . . . . .	Byte	 000001E0 _DATA	
NumsEntered  . . . . . . . . . .	Byte	 000001BD _DATA	
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
ProgInstruc  . . . . . . . . . .	Byte	 0000005E _DATA	
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
SignNumEntry . . . . . . . . . .	Byte	 00000153 _DATA	
Spacer . . . . . . . . . . . . .	Byte	 00000233 _DATA	
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
ThxBye . . . . . . . . . . . . .	Byte	 0000021D _DATA	
TitleLabel . . . . . . . . . . .	Byte	 00000000 _DATA	
TruncAvg . . . . . . . . . . . .	Byte	 00000200 _DATA	
USERSIZE . . . . . . . . . . . .	Number	 0000000Bh   
UserArray  . . . . . . . . . . .	DWord	 0000023A _DATA	
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cyan . . . . . . . . . . . . . .	Number	 00000003h   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
red  . . . . . . . . . . . . . .	Number	 00000004h   
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
